'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxstyleUtils = require('jsxstyle-utils');
var React = require('react');

/** Shared instance of a style cache object. */

var styleCache = jsxstyleUtils.getStyleCache();

function _extends() {
  _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

  return _extends.apply(this, arguments);
}

function componentFactory(displayName) {
  var tagName = 'div';
  var defaultProps = jsxstyleUtils.componentStyles[displayName];

  var component = function component(props) {
    var Component = props.component || tagName;
    var className = styleCache.getClassName(props, props.className);

    var componentProps = _extends({}, props.props);

    if (className) {
      componentProps.className = className;
    }

    if (props.style) {
      componentProps.style = props.style;
    }

    return React.createElement(Component, componentProps, props.children);
  };

  component.displayName = displayName;
  component.defaultProps = defaultProps;
  return component;
}

/**
 * Hook that returns the `true` if the provided media query matches.
 *
 * https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries
 */

var useMatchMedia = function useMatchMedia(mediaQuery) {
  if (typeof window === 'undefined') {
    return false;
  }

  var deps = [mediaQuery];
  var mqList = React.useMemo(function () {
    return window.matchMedia(mediaQuery);
  }, deps);

  var _useState = React.useState(mqList.matches),
    matches = _useState[0],
    setMatches = _useState[1];

  React.useEffect(function () {
    var changeEventListener = function changeEventListener(e) {
      setMatches(e.matches);
    };

    try {
      // `MediaQueryList.addListener` is deprecated but more widely supported at the moment
      mqList.addListener(changeEventListener);
      return function () {
        return mqList.removeListener(changeEventListener);
      };
    } catch (err) {
      mqList.addEventListener('change', changeEventListener);
      return function () {
        return mqList.removeEventListener('change', changeEventListener);
      };
    }
  }, deps);
  return matches;
};

// tslint:disable max-classes-per-file
var depFactory = componentFactory;

if (process.env.NODE_ENV !== 'production') {
  depFactory = function depFactory(displayName) {
    var defaultProps = jsxstyleUtils.componentStyles[displayName];
    var hasWarned = false;

    var component = function component(props) {
      if (!hasWarned) {
        hasWarned = true;
        console.error(
          'jsxstyle\u2019s `%s` component is deprecated and will be removed in future versions of jsxstyle.',
          displayName
        );
      }

      return React.createElement(Box, props);
    };

    component.displayName = displayName;
    component.defaultProps = defaultProps;
    return component;
  };
}

var Box = componentFactory('Box');
var Block = componentFactory('Block');
var Inline = componentFactory('Inline');
var InlineBlock = componentFactory('InlineBlock');
var Row = componentFactory('Row');
var Col = componentFactory('Col');
var InlineRow = componentFactory('InlineRow');
var InlineCol = componentFactory('InlineCol');
var Grid = componentFactory('Grid'); // <Box component="table" />

var Table = /*#__PURE__*/ depFactory('Table');
var TableRow = /*#__PURE__*/ depFactory('TableRow');
var TableCell = /*#__PURE__*/ depFactory('TableCell'); // <Row display="inline-flex" />

var Flex = /*#__PURE__*/ depFactory('Flex');
var InlineFlex = /*#__PURE__*/ depFactory('InlineFlex');

exports.Block = Block;
exports.Box = Box;
exports.Col = Col;
exports.Flex = Flex;
exports.Grid = Grid;
exports.Inline = Inline;
exports.InlineBlock = InlineBlock;
exports.InlineCol = InlineCol;
exports.InlineFlex = InlineFlex;
exports.InlineRow = InlineRow;
exports.Row = Row;
exports.Table = Table;
exports.TableCell = TableCell;
exports.TableRow = TableRow;
exports.cache = styleCache;
exports.useMatchMedia = useMatchMedia;
